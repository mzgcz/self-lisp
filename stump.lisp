(defun self-stump (x s theta)
  (let ((tmp (- x theta)))
    (if (<= tmp 0)
        (* -1 s)
        s)))

(defun self-err-in (datas)
  (do* ((theta -20 (+ theta 1/10000))
        (num (list-length datas))
        (now-err-in 0 0)
        (s -1)
        best-s
        best-theta
        (err-in 10000))
       ((> theta 20)
        (list best-s
              best-theta
              (/ err-in num)
              (+ 0.5 (* 0.3 best-s (- (abs best-theta) 1)))))
    (dolist (data datas)
      (let ((x (car data))
            (y (cdr data)))
        (if (/= y (self-stump x s theta))
            (incf now-err-in))))
    (let ((rest-err-in (- num now-err-in)))
      (cond ((< now-err-in err-in) (setf err-in now-err-in
                                         best-s s
                                         best-theta theta))
            ((< rest-err-in err-in) (setf err-in rest-err-in
                                          best-s (* -1 s)
                                          best-theta theta))))))

(defun self-read-string (str)
  (let ((beg-pos 0)
        (nums '()))
    (do* ((num (read-from-string str nil 'eof :start beg-pos)
               (read-from-string str nil 'eof :start beg-pos)))
         ((eql num 'eof))
      (multiple-value-bind (my-num my-pos)
          (read-from-string str nil 'eof :start beg-pos)
        (setf beg-pos my-pos)
        (push my-num nums)))
    (values (reverse (cdr nums)) (car nums))))

(defun self-read-data (fname)
  (let ((dbs '()))
    (with-open-file (str fname :direction :input)
      (do ((line (read-line str nil 'eof)
                 (read-line str nil 'eof)))
          ((eql line 'eof))
        (multiple-value-bind (x y)
            (self-read-string line)
          (push (cons x y) dbs))))
    (reverse dbs)))

(defun self-column (datas column)
  (let ((dbs '()))
    (dolist (data datas)
      (push (cons (nth column (car data)) (cdr data)) dbs))
    dbs))

(defun self-results (fname)
  (let* ((dbs (self-read-data fname))
         (num (list-length (caar dbs)))
         (results '()))
    (dotimes (no num)
      (push (self-err-in (self-column dbs no)) results))
    results))

(defun self-test (fname)
  (let* ((dbs (self-read-data fname))
         (datas (self-column dbs 3))
         (err-num 0)
         (total-num 0))
    (dolist (data datas)
      (if (/= (self-stump (car data) -1 1461/1000) (cdr data))
          (incf err-num))
      (incf total-num))
    (list err-num total-num (/ err-num total-num))))
